
/// # Summary
/// Implementation of the Haraka permuatation and the Haraka256 and Haraka512 hash functions
namespace haraka {

    open haraka.aes;
    open haraka.mixing;
    open Microsoft.Quantum.Intrinsic;
    open Microsoft.Quantum.Diagnostics;
    open Microsoft.Quantum.Arrays;
    open common.maybeqbit;

    /// # Summary
    /// Returns the default round constants used for the Haraka hash functions.
    /// # Output
    /// The default Haraka constants
    function getDefaultConstants() : Int[][] {
        return [
                [0x9d, 0x7b, 0x81, 0x75, 0xf0, 0xfe, 0xc5, 0xb2, 0x0a, 0xc0, 0x20, 0xe6, 0x4c, 0x70, 0x84, 0x06],
                [0x17, 0xf7, 0x08, 0x2f, 0xa4, 0x6b, 0x0f, 0x64, 0x6b, 0xa0, 0xf3, 0x88, 0xe1, 0xb4, 0x66, 0x8b],
                [0x14, 0x91, 0x02, 0x9f, 0x60, 0x9d, 0x02, 0xcf, 0x98, 0x84, 0xf2, 0x53, 0x2d, 0xde, 0x02, 0x34],
                [0x79, 0x4f, 0x5b, 0xfd, 0xaf, 0xbc, 0xf3, 0xbb, 0x08, 0x4f, 0x7b, 0x2e, 0xe6, 0xea, 0xd6, 0x0e],
                [0x44, 0x70, 0x39, 0xbe, 0x1c, 0xcd, 0xee, 0x79, 0x8b, 0x44, 0x72, 0x48, 0xcb, 0xb0, 0xcf, 0xcb],
                [0x7b, 0x05, 0x8a, 0x2b, 0xed, 0x35, 0x53, 0x8d, 0xb7, 0x32, 0x90, 0x6e, 0xee, 0xcd, 0xea, 0x7e],
                [0x1b, 0xef, 0x4f, 0xda, 0x61, 0x27, 0x41, 0xe2, 0xd0, 0x7c, 0x2e, 0x5e, 0x43, 0x8f, 0xc2, 0x67],
                [0x3b, 0x0b, 0xc7, 0x1f, 0xe2, 0xfd, 0x5f, 0x67, 0x07, 0xcc, 0xca, 0xaf, 0xb0, 0xd9, 0x24, 0x29],
                [0xee, 0x65, 0xd4, 0xb9, 0xca, 0x8f, 0xdb, 0xec, 0xe9, 0x7f, 0x86, 0xe6, 0xf1, 0x63, 0x4d, 0xab],
                [0x33, 0x7e, 0x03, 0xad, 0x4f, 0x40, 0x2a, 0x5b, 0x64, 0xcd, 0xb7, 0xd4, 0x84, 0xbf, 0x30, 0x1c],
                [0x00, 0x98, 0xf6, 0x8d, 0x2e, 0x8b, 0x02, 0x69, 0xbf, 0x23, 0x17, 0x94, 0xb9, 0x0b, 0xcc, 0xb2],
                [0x8a, 0x2d, 0x9d, 0x5c, 0xc8, 0x9e, 0xaa, 0x4a, 0x72, 0x55, 0x6f, 0xde, 0xa6, 0x78, 0x04, 0xfa],
                [0xd4, 0x9f, 0x12, 0x29, 0x2e, 0x4f, 0xfa, 0x0e, 0x12, 0x2a, 0x77, 0x6b, 0x2b, 0x9f, 0xb4, 0xdf],
                [0xee, 0x12, 0x6a, 0xbb, 0xae, 0x11, 0xd6, 0x32, 0x36, 0xa2, 0x49, 0xf4, 0x44, 0x03, 0xa1, 0x1e],
                [0xa6, 0xec, 0xa8, 0x9c, 0xc9, 0x00, 0x96, 0x5f, 0x84, 0x00, 0x05, 0x4b, 0x88, 0x49, 0x04, 0xaf],
                [0xec, 0x93, 0xe5, 0x27, 0xe3, 0xc7, 0xa2, 0x78, 0x4f, 0x9c, 0x19, 0x9d, 0xd8, 0x5e, 0x02, 0x21],
                [0x73, 0x01, 0xd4, 0x82, 0xcd, 0x2e, 0x28, 0xb9, 0xb7, 0xc9, 0x59, 0xa7, 0xf8, 0xaa, 0x3a, 0xbf],
                [0x6b, 0x7d, 0x30, 0x10, 0xd9, 0xef, 0xf2, 0x37, 0x17, 0xb0, 0x86, 0x61, 0x0d, 0x70, 0x60, 0x62],
                [0xc6, 0x9a, 0xfc, 0xf6, 0x53, 0x91, 0xc2, 0x81, 0x43, 0x04, 0x30, 0x21, 0xc2, 0x45, 0xca, 0x5a],
                [0x3a, 0x94, 0xd1, 0x36, 0xe8, 0x92, 0xaf, 0x2c, 0xbb, 0x68, 0x6b, 0x22, 0x3c, 0x97, 0x23, 0x92],
                [0xb4, 0x71, 0x10, 0xe5, 0x58, 0xb9, 0xba, 0x6c, 0xeb, 0x86, 0x58, 0x22, 0x38, 0x92, 0xbf, 0xd3],
                [0x8d, 0x12, 0xe1, 0x24, 0xdd, 0xfd, 0x3d, 0x93, 0x77, 0xc6, 0xf0, 0xae, 0xe5, 0x3c, 0x86, 0xdb],
                [0xb1, 0x12, 0x22, 0xcb, 0xe3, 0x8d, 0xe4, 0x83, 0x9c, 0xa0, 0xeb, 0xff, 0x68, 0x62, 0x60, 0xbb],
                [0x7d, 0xf7, 0x2b, 0xc7, 0x4e, 0x1a, 0xb9, 0x2d, 0x9c, 0xd1, 0xe4, 0xe2, 0xdc, 0xd3, 0x4b, 0x73],
                [0x4e, 0x92, 0xb3, 0x2c, 0xc4, 0x15, 0x14, 0x4b, 0x43, 0x1b, 0x30, 0x61, 0xc3, 0x47, 0xbb, 0x43],
                [0x99, 0x68, 0xeb, 0x16, 0xdd, 0x31, 0xb2, 0x03, 0xf6, 0xef, 0x07, 0xe7, 0xa8, 0x75, 0xa7, 0xdb],
                [0x2c, 0x47, 0xca, 0x7e, 0x02, 0x23, 0x5e, 0x8e, 0x77, 0x59, 0x75, 0x3c, 0x4b, 0x61, 0xf3, 0x6d],
                [0xf9, 0x17, 0x86, 0xb8, 0xb9, 0xe5, 0x1b, 0x6d, 0x77, 0x7d, 0xde, 0xd6, 0x17, 0x5a, 0xa7, 0xcd],
                [0x5d, 0xee, 0x46, 0xa9, 0x9d, 0x06, 0x6c, 0x9d, 0xaa, 0xe9, 0xa8, 0x6b, 0xf0, 0x43, 0x6b, 0xec],
                [0xc1, 0x27, 0xf3, 0x3b, 0x59, 0x11, 0x53, 0xa2, 0x2b, 0x33, 0x57, 0xf9, 0x50, 0x69, 0x1e, 0xcb],
                [0xd9, 0xd0, 0x0e, 0x60, 0x53, 0x03, 0xed, 0xe4, 0x9c, 0x61, 0xda, 0x00, 0x75, 0x0c, 0xee, 0x2c],
                [0x50, 0xa3, 0xa4, 0x63, 0xbc, 0xba, 0xbb, 0x80, 0xab, 0x0c, 0xe9, 0x96, 0xa1, 0xa5, 0xb1, 0xf0],
                [0x39, 0xca, 0x8d, 0x93, 0x30, 0xde, 0x0d, 0xab, 0x88, 0x29, 0x96, 0x5e, 0x02, 0xb1, 0x3d, 0xae],
                [0x42, 0xb4, 0x75, 0x2e, 0xa8, 0xf3, 0x14, 0x88, 0x0b, 0xa4, 0x54, 0xd5, 0x38, 0x8f, 0xbb, 0x17],
                [0xf6, 0x16, 0x0a, 0x36, 0x79, 0xb7, 0xb6, 0xae, 0xd7, 0x7f, 0x42, 0x5f, 0x5b, 0x8a, 0xbb, 0x34],
                [0xde, 0xaf, 0xba, 0xff, 0x18, 0x59, 0xce, 0x43, 0x38, 0x54, 0xe5, 0xcb, 0x41, 0x52, 0xf6, 0x26],
                [0x78, 0xc9, 0x9e, 0x83, 0xf7, 0x9c, 0xca, 0xa2, 0x6a, 0x02, 0xf3, 0xb9, 0x54, 0x9a, 0xe9, 0x4c],
                [0x35, 0x12, 0x90, 0x22, 0x28, 0x6e, 0xc0, 0x40, 0xbe, 0xf7, 0xdf, 0x1b, 0x1a, 0xa5, 0x51, 0xae],
                [0xcf, 0x59, 0xa6, 0x48, 0x0f, 0xbc, 0x73, 0xc1, 0x2b, 0xd2, 0x7e, 0xba, 0x3c, 0x61, 0xc1, 0xa0],
                [0xa1, 0x9d, 0xc5, 0xe9, 0xfd, 0xbd, 0xd6, 0x4a, 0x88, 0x82, 0x28, 0x02, 0x03, 0xcc, 0x6a, 0x75]
            ];
    }

    /// # Summary
    /// Returns an array of the correct shape to be used as round constants for the Haraka hash functions.
    /// All values are zero
    /// # Output
    /// A dummy array containing HAraka round constants
    function getZeroConstants() : Int[][] {
        return ConstantArray(40, ConstantArray(16, 0));
    }

    operation haraka256Perm(state : Qubit[], rc : Int[][]) : Unit is Adj {
        Fact(Length(state) == 256, "Invalid state length");
        using (additionalBits = Qubit[2 * 128]) {
            let immediateStates = divideIntoRegisters(additionalBits);
            let outputStates = divideIntoRegisters(state);
            let encIn = outputStates + immediateStates;
            let encOut = immediateStates + divideIntoRegisters(getUnmixedRegisters256(state));
            for (i in 0 .. 4) {
                for (j in 0 .. 3) {
                    aesEnc(encIn[j], encOut[j], rc[4 * i + j]);
                }
            }
        }
    }

    /// # Summary
    /// Computes the Haraka256 hash value for the given input and round constants and stores it in the output qbits
    /// # Output
    /// ## input
    /// The 256 qbit input to compute the hash value for.
    /// ## output
    /// The qbits, where the 256 bit output is stored
    /// ## rc
    /// The round constants used
    operation haraka256(input : MaybeQbit[], output : Qubit[], rc : Int[][]) : Unit is Adj {
        Fact(Length(input) == 256, "Invalid input length");
        Fact(Length(output) == 256, "Invalid output length");

        maybeXOR(input, output);
        haraka256Perm(output, rc);
        maybeXOR(input, output);
    }

    /// # Summary
    /// Applies the Haraka512 permutation on the given qbits using the given round constants
    /// # Input
    /// ## state
    /// The qbits to apply the permutation to
    /// ## rc
    /// The round constants to use for the permutation
    operation haraka512Perm(state : Qubit[], rc : Int[][]) : Unit is Adj {
        Fact(Length(state) == 512, "Invalid state length");
        using (additionalBits = Qubit[4 * 128]) {
            let immediateStates = divideIntoRegisters(additionalBits);
            let encIn = divideIntoRegisters(state) + immediateStates;
            let encOut = immediateStates + divideIntoRegisters(getUnmixedRegisters512(state));

            for (i in 0 .. 4) {
                for (j in 0 .. 7) {
                    aesEnc(encIn[j], encOut[j], rc[8 * i + j]);
                }
            }
        }
    }

    /// # Summary
    /// Computes the Haraka512 hash value for the given input and round constants and stores it in the output qbits
    /// # Output
    /// ## input
    /// The 512 qbit input to compute the hash value for.
    /// ## output
    /// The qbits, where the 256 bit output is stored
    /// ## rc
    /// The round constants used
    operation haraka512(input : MaybeQbit[], output : Qubit[], rc : Int[][]) : Unit is Adj {
        Fact(Length(input) == 512, $"Invalid input length");
        Fact(Length(output) <= 256, "Invalid output length");
        using (outputState = Qubit[512]) {
            within {
                maybeXOR(input, outputState);
                haraka512Perm(outputState, rc);
            } apply {
                let offsets = [64, 64, 0, 0];
                for (l in 0 .. Length(output) - 1) {
                    let i = l / 64;
                    let j = l % 64;

                    let internalOffset = offsets[i];
                    let outIndex = i * 64;
                    let inputIndex = i * 128 + internalOffset;

                    CNOT(outputState[i * 128 + internalOffset + j], output[outIndex + j]);
                    maybeXORSingle(input[inputIndex + j], output[outIndex + j]);
                }
            }
        }
    }
}