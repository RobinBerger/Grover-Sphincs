namespace haraka.test {

    open Microsoft.Quantum.Diagnostics;
    open Microsoft.Quantum.Convert;
    open Microsoft.Quantum.Canon;
    open Microsoft.Quantum.Intrinsic;
    open Microsoft.Quantum.Arrays;
    open haraka;
    open haraka.aes;
    open haraka.sponge;
    open haraka.mixing;
    open BoyarPeralta11;
    open common.test;
    open common;
    open common.maybeqbit;

    /// # Summary
    /// performs a known input known outptut test of the aesEnc operation given the inputs and expected outputs.
    operation performEncTest(inputState : Int[], outputState : Int[], key : Int[]) : Unit {
        using (bits = Qubit[2 * 128]) {
            let registers = divideIntoRegisters(bits);
            let input = registers[0];
            let output = registers[1];
            initialize8(input, inputState);
            aesEnc(input, output, key);
            assert8Multiple(output, outputState, "Failed fixed round key test.");
            assert8Multiple(input, ConstantArray(16, 0), "Failed input reverse test.");
            ResetAll(bits);
        }
    }

    @Test("ToffoliSimulator")
    operation testEncSimple() : Unit {
        performEncTest([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ], [
            0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63
        ], [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]);
    }

    @Test("ToffoliSimulator")
    operation testEncAdvanced() : Unit {
        performEncTest([
            0x73, 0xe3, 0x3d, 0xa4, 0xac, 0x10, 0x46, 0x4e, 0x07, 0x82, 0x8d, 0x27, 0x92, 0x39, 0x86, 0xa1
        ], [
            0x0b, 0xb2, 0x4a, 0x3e, 0xdf, 0x0c, 0xf7, 0xdf, 0xc3, 0x81, 0x00, 0x16, 0x6e, 0x1c, 0xd0, 0xdb
        ], [
            0x24, 0x67, 0xe3, 0x47, 0xde, 0x3e, 0x26, 0xb2, 0x6c, 0x26, 0xe8, 0x29, 0x55, 0x53, 0x75, 0xc2
        ]);
    }

    @Test("ToffoliSimulator")
    operation testPermutationInverse() : Unit {
        let input = RangeAsIntArray(0 .. 127);
        let permutation = ShiftRows<Int>;
        let immediate = permutation(input);
        let output = inversePermutation(immediate, ShiftRows<Int>);
        for (i in 0 .. 127) {
            Fact(input[i] == output[i], $"{input}\n{immediate}\n{output}");
        }
    }

    /// # Summary
    /// performs a known input known outptut test of the haraka256 hash function given the inputs and expected outputs.
    operation performHaraka256Test(input : Int[], output : Int[], constants : Int[][]) : Unit {
        using (additionalBits = Qubit[2 * 128]) {
            haraka256(bytesToMaybeQbit(input), additionalBits, constants);
            assert8Multiple(additionalBits, output, "");
            
            ResetAll(additionalBits);
        }
    }

    @Test("ToffoliSimulator")
    operation testHaraka256Simple() : Unit {
        performHaraka256Test([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ], [
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36
        ], getZeroConstants());
    }

    @Test("ToffoliSimulator")
    operation testHaraka256Advanced() : Unit {
        performHaraka256Test([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ], [
            0x58, 0x30, 0x66, 0xc7, 0xdd, 0x64, 0x5e, 0xee, 0x22, 0x98, 0x0f, 0x3c, 0x35, 0x97, 0x1b, 0x70, 0x29, 0x73, 0xd0, 0x3a, 0x02, 0x9e, 0xb2, 0x46, 0xeb, 0x44, 0xec, 0xeb, 0x4a, 0x4f, 0x58, 0x63
        ], getDefaultConstants());
    }

    @Test("ToffoliSimulator")
    operation testHaraka256SimpleWithInput() : Unit {
        performHaraka256Test([
            0xd3, 0x44, 0x5e, 0xf1, 0x13, 0x1d, 0xd8, 0x9b, 0xb9, 0xa1, 0xea, 0x9d, 0x44, 0x5a, 0xe1, 0x76, 0xe0, 0x4c, 0x08, 0x6b, 0x4c, 0x16, 0x70, 0x97, 0x94, 0x17, 0xe7, 0xe9, 0xe1, 0x12, 0xa3, 0xe9
        ], [
            0x97, 0x8f, 0xeb, 0x0a, 0x3f, 0x72, 0x09, 0x23, 0x54, 0x4e, 0x92, 0xaf, 0xb2, 0x85, 0x9d, 0x98, 0xf4, 0xe3, 0xf7, 0x64, 0x21, 0x33, 0x20, 0x09, 0x5f, 0x1a, 0xb6, 0x0c, 0x2d, 0x6b, 0x6e, 0x1f
        ], getZeroConstants());
    }

    @Test("ToffoliSimulator")
    operation testHaraka256AdvancedWithInput() : Unit {
        performHaraka256Test([
            0xd3, 0x44, 0x5e, 0xf1, 0x13, 0x1d, 0xd8, 0x9b, 0xb9, 0xa1, 0xea, 0x9d, 0x44, 0x5a, 0xe1, 0x76, 0xe0, 0x4c, 0x08, 0x6b, 0x4c, 0x16, 0x70, 0x97, 0x94, 0x17, 0xe7, 0xe9, 0xe1, 0x12, 0xa3, 0xe9
        ], [
            0x33, 0xb8, 0xcd, 0x50, 0x43, 0x6e, 0xc0, 0x8b, 0xba, 0xaa, 0xe7, 0xc0, 0xa4, 0x2a, 0x5c, 0xd9, 0xaf, 0xa8, 0xe7, 0x02, 0xe2, 0x6a, 0x1b, 0x8b, 0x8e, 0xad, 0xac, 0x5a, 0x5e, 0x77, 0x59, 0xbc
        ], getDefaultConstants());
    }

    /// # Summary
    /// performs a known input known outptut test of the haraka512 hash function given the inputs and expected outputs.
    operation performHaraka512Test(input : Int[], output : Int[], constants : Int[][]) : Unit {
        using (additionalBits = Qubit[2 * 128]) {
            haraka512(bytesToMaybeQbit(input), additionalBits, constants);
            assert8Multiple(additionalBits, output, "");
            
            ResetAll(additionalBits);
        }
    }

    @Test("ToffoliSimulator")
    operation testHaraka512Simple() : Unit {
        performHaraka512Test([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ], [
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36
        ], getZeroConstants());
    }

    @Test("ToffoliSimulator")
    operation testHaraka512Advanced() : Unit {
        performHaraka512Test([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ], [
            0x61, 0x65, 0x45, 0x4b, 0x61, 0xda, 0xe9, 0xb5, 0x3d, 0x08, 0x6b, 0x1a, 0x01, 0xd6, 0x76, 0x4a, 0x91, 0x1b, 0x2a, 0x47, 0x07, 0xcd, 0x23, 0x64, 0x0a, 0xb1, 0x48, 0xb3, 0xdb, 0x65, 0xca, 0xf3
        ], getDefaultConstants());
    }

    @Test("ToffoliSimulator")
    operation testHaraka512SimpleWithInput() : Unit {
        performHaraka512Test([
            0x53, 0xa2, 0x6d, 0x7e, 0x96, 0xbd, 0xa0, 0x61, 0x34, 0xae, 0xb4, 0x3a, 0x38, 0x19, 0x54, 0xb6, 0xa3, 0xda, 0x90, 0xc8, 0xa3, 0xe5, 0x88, 0xb7, 0xf0, 0xdc, 0xe0, 0x0e, 0x55, 0x50, 0xfa, 0x9e, 0x51, 0xd9, 0x61, 0x98, 0x81, 0x1c, 0xb0, 0x3d, 0x2b, 0x5b, 0x86, 0x93, 0x09, 0xad, 0xdf, 0x2d, 0x6c, 0x16, 0x2c, 0xe2, 0xd1, 0x0f, 0x92, 0xc5, 0xf6, 0xa2, 0x4e, 0x9d, 0x51, 0x13, 0x05, 0x0b
        ], [
            0x51, 0xe3, 0xf8, 0x18, 0xea, 0x48, 0x8e, 0x64, 0x28, 0xf5, 0x58, 0x0c, 0xca, 0x60, 0x4f, 0x0a, 0x81, 0x43, 0xc9, 0x0e, 0x00, 0xda, 0x6f, 0xbb, 0x34, 0xb8, 0xf8, 0xba, 0x7c, 0xc9, 0xd4, 0xa2
        ], getZeroConstants());
    }

    @Test("ToffoliSimulator")
    operation testHaraka512AdvancedWithInput() : Unit {
        performHaraka512Test([
            0x53, 0xa2, 0x6d, 0x7e, 0x96, 0xbd, 0xa0, 0x61, 0x34, 0xae, 0xb4, 0x3a, 0x38, 0x19, 0x54, 0xb6, 0xa3, 0xda, 0x90, 0xc8, 0xa3, 0xe5, 0x88, 0xb7, 0xf0, 0xdc, 0xe0, 0x0e, 0x55, 0x50, 0xfa, 0x9e, 0x51, 0xd9, 0x61, 0x98, 0x81, 0x1c, 0xb0, 0x3d, 0x2b, 0x5b, 0x86, 0x93, 0x09, 0xad, 0xdf, 0x2d, 0x6c, 0x16, 0x2c, 0xe2, 0xd1, 0x0f, 0x92, 0xc5, 0xf6, 0xa2, 0x4e, 0x9d, 0x51, 0x13, 0x05, 0x0b
        ], [
            0x69, 0x5b, 0xe8, 0x17, 0x7d, 0x36, 0x67, 0x40, 0xaa, 0x0b, 0x1c, 0xe5, 0xb9, 0xa2, 0xdd, 0x39, 0xc5, 0x0b, 0x61, 0x1b, 0x8b, 0x2d, 0x1e, 0x51, 0x73, 0x60, 0xb6, 0x6c, 0xee, 0x08, 0xe4, 0x37
        ], getDefaultConstants());
    }

    /// # Summary
    /// performs a known input known outptut test of the haraka sponge absorb function given the inputs and expected outputs.
    operation performAbsorbTest(input : Int[], output : Int[], rc : Int[][]) : Unit {
        let len = Length(input);
        using (outputBits = Qubit[512]) {
            harakaAbsorb(bytesToMaybeQbit(input), outputBits, rc);
            assert8Multiple(outputBits, output, "");
            ResetAll(outputBits);
        }
    }

    @Test("ToffoliSimulator")
    operation testAbsorbNoInput() : Unit {
        performAbsorbTest(new Int[0], [
            0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ], getZeroConstants());
    }

    @Test("ToffoliSimulator")
    operation testAbsorbWithInput() : Unit {
        performAbsorbTest([
            0xd5, 0xc3, 0x87, 0xb5, 0xc9, 0x0f, 0xfb, 0xf8, 0x9f, 0xea, 0x6d, 0x88, 0x14, 0xa8, 0x6a, 0x84, 0xe8, 0x95, 0xf3, 0x8f, 0xa1, 0x99, 0x32, 0x2a, 0x33, 0x39, 0xcc, 0xe9, 0x52, 0xee, 0xbb, 0x14, 0xa1, 0x8a, 0xbe, 0xb0, 0xfe, 0xa2, 0x6c, 0x3a, 0x17, 0x06, 0x19, 0xb5, 0x8f, 0x6f, 0xde, 0x6e, 0x84, 0xe3, 0x40, 0xc8, 0xed, 0xc9, 0xcc, 0x1f, 0x20, 0x37, 0x1b, 0x09, 0x64, 0x80, 0x3f, 0xcb
        ], [
            0x5d, 0xaa, 0xfd, 0x44, 0xc1, 0x7c, 0xd8, 0x43, 0x6c, 0x32, 0x97, 0xed, 0x96, 0xa0, 0x60, 0x45, 0x0d, 0xd6, 0xf6, 0x9c, 0xbd, 0x63, 0x23, 0x3b, 0x5e, 0x34, 0x77, 0xed, 0x52, 0x56, 0xb2, 0xc2, 0xc3, 0xdb, 0x4c, 0xf1, 0xb2, 0x47, 0x4f, 0xdb, 0x55, 0x63, 0x17, 0xa5, 0x9c, 0xcb, 0xc2, 0xd2, 0x0f, 0x57, 0x32, 0x6b, 0xca, 0x29, 0xe1, 0x0b, 0x6b, 0x3a, 0xb2, 0xb1, 0x51, 0xb6, 0x1b, 0xe8
        ], getDefaultConstants());
    }

    @Test("ToffoliSimulator")
    operation testAbsorbWithNonalignedInput() : Unit {
        performAbsorbTest([
            0xd5, 0xc3, 0x87, 0xb5, 0xc9, 0x0f, 0xfb, 0xf8, 0x9f, 0xea, 0x6d, 0x88, 0x14, 0xa8, 0x6a, 0x84, 0xe8, 0x95, 0xf3, 0x8f, 0xa1, 0x99, 0x32, 0x2a, 0x33, 0x39, 0xcc, 0xe9, 0x52, 0xee, 0xbb, 0x14, 0xa1, 0x8a, 0xbe, 0xb0, 0xfe, 0xa2, 0x6c, 0x3a, 0x17, 0x06, 0x19, 0xb5, 0x8f, 0x6f, 0xde, 0x6e, 0x84, 0xe3, 0x40, 0xc8, 0xed, 0xc9, 0xcc, 0x1f, 0x20, 0x37, 0x1b, 0x09, 0x64, 0x80, 0x3f, 0xcb, 0xab, 0x05, 0x3b, 0x1e, 0x1f, 0x86, 0x32, 0x99, 0x9b, 0xb8, 0x23, 0x63, 0x48, 0xda, 0xf4, 0xb5, 0x94, 0x8d, 0x00, 0x1a, 0xb9, 0xb7, 0x2f, 0x12, 0xb9, 0x62, 0x9a, 0x5c, 0x48, 0xac, 0x44, 0xf8, 0x31, 0x58, 0xc5, 0x33
        ], [
            0x3b, 0xbb, 0xc4, 0x29, 0x13, 0xd1, 0xb0, 0x69, 0x55, 0xe4, 0x3b, 0x10, 0x10, 0x66, 0x00, 0xf3, 0x4f, 0x85, 0x61, 0x01, 0x9a, 0xab, 0x8b, 0xcf, 0x42, 0xe7, 0xbe, 0x95, 0x5d, 0x08, 0x9a, 0x8e, 0x2c, 0x4b, 0xe0, 0x6f, 0x9a, 0x1a, 0x79, 0xdd, 0x42, 0x73, 0x12, 0xe9, 0xd2, 0xae, 0xdb, 0x8a, 0xd5, 0xf5, 0xa8, 0x7f, 0x23, 0x89, 0xcf, 0xeb, 0x47, 0xcf, 0x29, 0xfa, 0x6d, 0x9c, 0x03, 0xf0
        ], getDefaultConstants());
    }

    @Test("ToffoliSimulator")
    operation testAbsorbSmallInput() : Unit {
        performAbsorbTest([ 0xFF ], [
            0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ], getDefaultConstants());
    }

    /// # Summary
    /// performs a known input known outptut test of the haraka sponge squeeze function given the inputs and expected outputs.
    operation performSqueeze(inputState : Int[], outputState : Int[], output : Int[], rc : Int[][]) : Unit {
        using ((stateBits, outputBits) = (Qubit[512], Qubit[Length(output) * 8])) {
            initialize8(stateBits, inputState);
            harakaSqueeze(stateBits, outputBits, rc);
            assert8Multiple(stateBits, outputState, "Invalid output state.");
            assert8Multiple(outputBits, output, "Invalid output.");
            ResetAll(stateBits + outputBits);
        }
    }

    @Test("ToffoliSimulator")
    operation testSqueezeSimple() : Unit {
        performSqueeze([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ], [
            0x4a, 0x3e, 0xc2, 0x8b, 0x65, 0x3a, 0x60, 0x62, 0xe0, 0xb5, 0xb9, 0x0c, 0x69, 0xce, 0x3e, 0x0d, 0x76, 0xd3, 0xda, 0x91, 0x1b, 0x16, 0x6e, 0x4d, 0xdc, 0xf1, 0x54, 0x62, 0x98, 0xe4, 0xf0, 0x59, 0xc4, 0x3e, 0xac, 0xe9, 0x5f, 0x27, 0xe6, 0xc8, 0x20, 0x3c, 0xbd, 0x0b, 0x1a, 0x01, 0x99, 0xd6, 0x11, 0xc4, 0xfb, 0x7f, 0x0d, 0x50, 0x8a, 0xd0, 0xd0, 0x5b, 0x80, 0xee, 0x5e, 0xca, 0x9f, 0xb5
        ], [
            0x18, 0x50, 0x7c, 0x47, 0x02, 0x45, 0xbe, 0x48, 0x61, 0x65, 0x45, 0x4b, 0x61, 0xda, 0xe9, 0xb5, 0x71, 0x5c, 0xe4, 0xaf, 0x70, 0xc6, 0x64, 0x0e, 0x3d, 0x08, 0x6b, 0x1a, 0x01, 0xd6, 0x76, 0x4a, 0x03, 0x5b, 0xbc, 0x39, 0x02, 0x64, 0x99, 0xc3, 0xe2, 0x64, 0x16, 0x84, 0x29, 0x6f, 0xd3, 0xc7, 0x30, 0xb6, 0x53, 0x7d, 0x98, 0xba, 0x73, 0xf7, 0xc6, 0xbc, 0xbe, 0x54, 0x04, 0x57, 0xd0, 0xfa, 0x0f, 0x3c, 0xd5, 0xa1, 0x6f, 0x3f, 0x55, 0x34, 0x16, 0x94, 0xde, 0xfd, 0xb3, 0x4e, 0xe1, 0x18, 0x10, 0xcd, 0xc9, 0x1c, 0x92, 0xe6, 0x3c, 0x41, 0x56, 0xcb, 0xa5, 0x6c, 0x4d, 0x2e, 0x9c, 0x47, 0x77, 0xb5, 0x43, 0xf3, 0x29, 0x7f, 0xca, 0x04, 0x5f, 0x34, 0x2b, 0xef, 0xfa, 0xb3, 0x63, 0x5e, 0xec, 0x8d, 0x5e, 0x12, 0xfa, 0xb3, 0xc1, 0xbe, 0x51, 0x04, 0x86, 0x44, 0x93, 0x23, 0x9d, 0xf2, 0x4a, 0x3e, 0xc2, 0x8b, 0x65, 0x3a, 0x60, 0x62, 0xe0, 0xb5, 0xb9, 0x0c, 0x69, 0xce, 0x3e, 0x0d, 0x76, 0xd3, 0xda, 0x91, 0x1b, 0x16, 0x6e, 0x4d, 0xdc, 0xf1, 0x54, 0x62, 0x98, 0xe4, 0xf0, 0x59
        ], getDefaultConstants());
    }

    @Test("ToffoliSimulator")
    operation testSqueezeAdvanced() : Unit {
        performSqueeze([
            0x4a, 0x3e, 0xc2, 0x8b, 0x65, 0x3a, 0x60, 0x62, 0xe0, 0xb5, 0xb9, 0x0c, 0x69, 0xce, 0x3e, 0x0d, 0x76, 0xd3, 0xda, 0x91, 0x1b, 0x16, 0x6e, 0x4d, 0xdc, 0xf1, 0x54, 0x62, 0x98, 0xe4, 0xf0, 0x59, 0xc4, 0x3e, 0xac, 0xe9, 0x5f, 0x27, 0xe6, 0xc8, 0x20, 0x3c, 0xbd, 0x0b, 0x1a, 0x01, 0x99, 0xd6, 0x11, 0xc4, 0xfb, 0x7f, 0x0d, 0x50, 0x8a, 0xd0, 0xd0, 0x5b, 0x80, 0xee, 0x5e, 0xca, 0x9f, 0xb5
        ], [
            0x56, 0xab, 0x7d, 0x10, 0x2d, 0x98, 0x97, 0xb1, 0x9f, 0xab, 0x46, 0x0a, 0x5f, 0x71, 0x73, 0xdb, 0x13, 0x31, 0x9a, 0x10, 0x10, 0x2f, 0x71, 0x4a, 0x91, 0x7c, 0x52, 0x3f, 0xd8, 0xfd, 0x59, 0x07, 0xf3, 0x54, 0xf0, 0xaa, 0x15, 0x0c, 0xce, 0xd4, 0xc9, 0x01, 0x6b, 0x4c, 0xb0, 0x3c, 0x53, 0x9b, 0x16, 0x15, 0xd9, 0xc6, 0x74, 0xe4, 0xf2, 0x6d, 0x9a, 0x65, 0xa0, 0x88, 0xe6, 0xd0, 0xfd, 0x42
        ], [
            0x3f, 0x0a, 0xbd, 0xe6, 0x02, 0x3f, 0x5f, 0x1b, 0x62, 0x78, 0xc1, 0xeb, 0x46, 0x8f, 0xb3, 0x34, 0xe6, 0x0e, 0x68, 0x57, 0xb9, 0x23, 0xe5, 0xd5, 0x02, 0x2c, 0xf3, 0xc6, 0x85, 0xac, 0xa1, 0x25, 0x56, 0xab, 0x7d, 0x10, 0x2d, 0x98, 0x97, 0xb1, 0x9f, 0xab, 0x46, 0x0a, 0x5f, 0x71, 0x73, 0xdb, 0x13, 0x31, 0x9a, 0x10, 0x10, 0x2f, 0x71, 0x4a, 0x91, 0x7c, 0x52, 0x3f, 0xd8, 0xfd, 0x59, 0x07
        ], getDefaultConstants());
    }

    /// # Summary
    /// performs a known input known outptut test of the haraka sponge hash function given the inputs and expected outputs.
    operation performHarakaSpongeTest(input : Int[], output : Int[], rc : Int[][]) : Unit {
        let outLen = Length(output);
        using (outputBits = Qubit[outLen * 8]) {
            harakaHash(bytesToMaybeQbit(input), outputBits, rc);
            assert8Multiple(outputBits, output, "Invalid output.");
            ResetAll(outputBits);
        }
    }

    @Test("ToffoliSimulator")
    operation testHarakaSpongeAdvancedNoInut() : Unit {
        performHarakaSpongeTest(new Int[0], [
            0xae, 0x55, 0x1e, 0x5b, 0x5b, 0xfb, 0x0c, 0x3e, 0x4f, 0xeb, 0xd1, 0x00, 0x3d, 0xc1, 0x80, 0x65, 0x76, 0x9b, 0xae, 0x2d, 0x06, 0xab, 0x38, 0x70, 0xaa, 0x41, 0x69, 0xfd, 0x7a, 0x52, 0x9b, 0x52, 0xcc, 0xd0, 0x4a, 0x93, 0xdc, 0xef, 0xb0, 0xcc, 0x88, 0x2c, 0x39, 0x83, 0xac, 0xb0, 0xca, 0x61, 0x97, 0x93, 0x26, 0xda, 0x38, 0x7d, 0x73, 0xa1, 0x34, 0x94, 0x34, 0xa8, 0xb0, 0x3d, 0xce, 0x4b, 0x76, 0x84, 0xeb, 0x9c, 0x54, 0xc8, 0x1e, 0x56, 0x24, 0x18, 0x6c, 0x59, 0xee, 0x80, 0x39, 0x99, 0xdc, 0x3f, 0x4e, 0x32, 0x71, 0x21, 0x8a, 0x52, 0xf1, 0x39, 0xa3, 0x51, 0x68, 0x5c, 0x4f, 0x3d, 0x2a, 0xb1, 0x20, 0x69
        ], getDefaultConstants());
    }

    @Test("ToffoliSimulator")
    operation testHarakaSpongeAdvancedWithInput() : Unit {
        performHarakaSpongeTest([
            0x9c, 0x1d, 0xce, 0x3a, 0x3b, 0x22, 0x5f, 0xe9, 0xe4, 0x1f, 0xca, 0xa7, 0xb7, 0xf5, 0x52, 0xce, 0x94, 0xca, 0x8a, 0x85, 0xb9, 0xd6, 0xc8, 0x57, 0x72, 0x13, 0xfa, 0xae, 0xfe, 0x5a, 0x26, 0x37, 0x17, 0xae, 0x59, 0x5d, 0xb0, 0x29, 0xb3, 0x99, 0x51, 0x3c, 0xe3, 0x60, 0x6b, 0xe5, 0x9a, 0xc5, 0xf8, 0xd9, 0x86, 0xf5, 0x74, 0xe4, 0x22, 0x3d, 0xe1, 0x68, 0xb9, 0x55, 0x65, 0xcc, 0x03, 0x4c, 0x84, 0xdd, 0x6b, 0x9b, 0x48, 0x20, 0x8c, 0x5a, 0x5e, 0x3b, 0xe3, 0x49, 0xe6, 0x21, 0xa4, 0x85, 0xdb, 0x6f, 0x6d, 0x7e, 0xa9, 0x0d, 0xae, 0x9f, 0xec, 0x37, 0x03, 0x90, 0x14, 0x97, 0x29, 0x9b, 0xe1, 0x43, 0x78, 0x8f, 0x25, 0xbe, 0x00, 0x68, 0x60, 0x5f, 0x38, 0xf0, 0x7b, 0x74, 0xc7
        ], [
            0x7c, 0xec, 0x24, 0x9e, 0x2b, 0xfa, 0xcb, 0x8a, 0xc5, 0xd8, 0x8e, 0x49, 0xe4, 0x84, 0xa7, 0x57, 0x42, 0x4a, 0x25, 0x4a, 0x54, 0x63, 0x50, 0x77, 0xd3, 0x56, 0x6c, 0x86, 0xf8, 0x59, 0x78, 0x3a, 0x75, 0x8b, 0xb6, 0x06, 0x8d, 0x35, 0xa8, 0x57, 0x12, 0xb5, 0xae, 0xdd, 0x70, 0x91, 0xf4, 0x54, 0xb3, 0xd0, 0x98, 0x90, 0xe6, 0x52, 0x5b, 0x61, 0x50
        ], getDefaultConstants());
    }

    @Test("ToffoliSimulator")
    operation testHarakaSpongeAdvancedWithAlignedInput() : Unit {
        performHarakaSpongeTest([
            0x9c, 0x1d, 0xce, 0x3a, 0x3b, 0x22, 0x5f, 0xe9, 0xe4, 0x1f, 0xca, 0xa7, 0xb7, 0xf5, 0x52, 0xce, 0x94, 0xca, 0x8a, 0x85, 0xb9, 0xd6, 0xc8, 0x57, 0x72, 0x13, 0xfa, 0xae, 0xfe, 0x5a, 0x26, 0x37, 0x17, 0xae, 0x59, 0x5d, 0xb0, 0x29, 0xb3, 0x99, 0x51, 0x3c, 0xe3, 0x60, 0x6b, 0xe5, 0x9a, 0xc5, 0xf8, 0xd9, 0x86, 0xf5, 0x74, 0xe4, 0x22, 0x3d, 0xe1, 0x68, 0xb9, 0x55, 0x65, 0xcc, 0x03, 0x4c
        ], [
            0x7b, 0x92, 0xdf, 0xda, 0x10, 0xbe, 0x32, 0x28, 0x10, 0x00, 0x73, 0xd7, 0xca, 0x86, 0xeb, 0xa5, 0xab, 0xf3, 0x9f, 0xde, 0x9f, 0xf6, 0xc3, 0xb3, 0xe1, 0x03, 0x18, 0x79, 0xcc, 0x28, 0x86, 0x02, 0xc6, 0x8f, 0xd5, 0xad, 0x6e, 0x0c, 0x00, 0x97, 0xb0, 0xe7, 0x69, 0xc3, 0x7c, 0xed, 0xfe, 0xd6, 0xca, 0xcf, 0x4f, 0xb2, 0x63, 0x57, 0x60, 0xbb, 0x7f, 0x31, 0xb3, 0x15, 0xc6, 0xf6, 0xfd, 0xce
        ], getDefaultConstants());
    }

    @Test("ToffoliSimulator")
    operation testHarakaSpongeAdvancedWithNonalignedInput() : Unit {
        performHarakaSpongeTest([
            0x9c, 0x1d, 0xce, 0x3a, 0x3b, 0x22, 0x5f, 0xe9, 0xe4, 0x1f, 0xca, 0xa7, 0xb7, 0xf5, 0x52, 0xce, 0x94, 0xca, 0x8a, 0x85, 0xb9, 0xd6, 0xc8, 0x57, 0x72, 0x13, 0xfa, 0xae, 0xfe, 0x5a, 0x26, 0x37, 0x17, 0xae, 0x59, 0x5d, 0xb0, 0x29, 0xb3, 0x99, 0x51, 0x3c, 0xe3, 0x60, 0x6b, 0xe5, 0x9a, 0xc5, 0xf8, 0xd9, 0x86, 0xf5, 0x74, 0xe4, 0x22, 0x3d, 0xe1, 0x68, 0xb9, 0x55, 0x65, 0xcc, 0x03
        ], [
            0xfa, 0x5e, 0xb1, 0x60, 0xb4, 0xa0, 0x5d, 0x49, 0x51, 0xe1, 0xcb, 0xf6, 0x5b, 0x83, 0xa0, 0xd5, 0x68, 0x6e, 0xe7, 0x69, 0x33, 0x41, 0xc5, 0xd5, 0xe8, 0xcc, 0x92, 0x45, 0x84, 0x52, 0xc3, 0x0c, 0x48, 0xd5, 0x02, 0x1f, 0xa5, 0x42, 0x13, 0xb5, 0xfb, 0x98, 0x60, 0x9e, 0xe9, 0xd8, 0x0e, 0xb0, 0x04, 0x50, 0xd0, 0xaf, 0xd8, 0xb0, 0xad, 0x53, 0x90, 0x5a, 0x3d, 0xf0, 0xbb, 0x65, 0x33
        ], getDefaultConstants());
    }


    /// # Summary
    /// Tests wether SBox and inverse SBox are the inverse of each other,
    @Test("ToffoliSimulator")
    operation testSBoxRev() : Unit {
        //Verify revSBox is the inverse of SBox on all inputs.
        using (bits = Qubit[16]) {
            let input = bits[0..7];
            let output = bits[8..15];
            for (i in 0 .. 255) {
                inverseSBox(input, output, false);
                Adjoint SBox(output, input, false);
                assert8Multiple(input, [0], $"Input {input}");
                ResetAll(bits);
            }
        }
    }

    /// # Summary
    /// Tests wether getMixedRegisters512 and gerUnmixedRegisters512 are the inverse of each other,
    @Test("ToffoliSimulator")
    operation testReverseMix512() : Unit {
        let input = SequenceI(0, 511);
        let mixed = getMixedRegisters512(input);
        let unmixed = getUnmixedRegisters512(mixed);
        for (i in 0 .. 511) {
            Fact(input[i] == unmixed[i], "Unmixing failed at position {i}.");
        }
    }

    /// # Summary
    /// Tests wether getMixedRegisters256 and gerUnmixedRegisters256 are the inverse of each other,
    @Test("ToffoliSimulator")
    operation testReverseMix256() : Unit {
        let input = SequenceI(0, 255);
        let mixed = getMixedRegisters256(input);
        let unmixed = getUnmixedRegisters256(mixed);
        for (i in 0 .. 255) {
            Fact(input[i] == unmixed[i], "Unmixing failed at position {i}.");
        }
    }
}